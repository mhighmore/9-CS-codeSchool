#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Code School
#+AUTHOR: Stephen Brown

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-codeSchool">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* What if...
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Previously, we looked at how we can store information in variables, read it back, look at its size and find sub-strings inside other strings. 
- We'll now recap using IF, ELSE and ELSEIF to get the second third of the knowledge we need to solve any computationally solvable problem. 
- Here's an example of some simple programs using =If= statements...

#+begin_src python
yourChoice=int(input("Enter a number between 1 and 5: "))

if yourChoice==1:
    print("You chose one")
elif yourChoice==2:
    print("You chose two")
elif yourChoice==3:
    print("You chose three")
else:
    print("You chose " +  str(yourChoice))

print("That's all, folks")
#+end_src

- The user enters their choice, and the computer first checks to see if the number was 1. If it was, the computer shows the appropriate message and then leaves the =If= 'block', carrying on with the rest of the program (so you'll see 'That's all, folks')
- If your choice wasn't 1, it tries the next condition (did you enter 2?)
- Again, if you did, you'll be told what you chose, then you'll see 'That's all, folks' as the program continues its program. 
- If your choice wasn't 2, it tries the next condition (did you enter 3?)
- Just like the other two cases, if you did, you'll be told what you chose, then you'll see 'That's all, folks' as the program continues its program. 
- Finally, if you didn't enter 1, 2 or 3 then the if block has a catch-all (the =else=) statement, which it will use instead. It'll then carry on with the rest of the program. 

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- With =if= statements, you don't only have to use 'is exactly equal to' (==) when comparing things.
#+begin_src python
tentacles=int(input("How many tentacles do you have? "))

if tentacles>=1:
    print("You should probably see the Doctor.")
else:
    print("I'm sure its nothing.")
#+end_src

- You can also use > and < by themselves.
- You can use =!== for 'is not equal to'...

#+begin_src python
print("1D fan detector program")
print("-----------------------")
print("")

albums=int(input("How many One Directon albums do you own? "))

if albums!=0:
    print("You may be a One Direction fan. Remain calm.")
else:
    print("You clearly don't like Britain's favourite boy band.")
#+end_src

- Strings can also be used in =If= statements. You can use == and !=, but not >, <, >= and <= (Saying that potato > horse wouldn't make any sense, for instance)
- You can also use =or= and =and= to set up more complex statements...

#+begin_src python
yourName=input("What's your name? ")

if yourName=="Mr. B":
    print("You da' man")
elif yourName=="Mr. W" or yourName=="Mr. D" or yourName=="Mr. P":
    print("Hello, Sir")
elif yourName=="Mrs. E":
    print("Hello, Mrs. E")
else:
    print("How's it going?")
#+end_src

- Finally, you can nest all sorts of code (put =if= statements inside =if= statements, for instance). 

#+begin_src python
gender=input("What's your gender? Enter M or F: ")
YOB=int(input("What year were you born (e.g. 2014): "))
yourAge=2015-YOB

if gender=="M": 
    if yourAge>=20: 
        print("You're ancient, mister!")
    else: 
        print("Ok, young Sir.")
elif gender=="F":
    print("My good lady, I never would have guessed.")
else: 
    print("You didn't choose male or female.")
#+end_src

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- *Silver:* Write a 'Guess what number I'm thinking of game. 
    - The number to be guessed will be 7.
    - If the player guesses too low or high, they should see a message saying so, and encouraging them to run the game again.
    - If they guess correctly, a message of congratulations should appear.
- *Gold:* 
    - Modify the program to say how far out they are. If they typed 8, the program should say 'you're 1 out of getting it right', rather than simply higher or lower. 
- *Platinum:* 
    - Modify the program to choose random numbers. 
    - You'll need to [[http://lmgtfy.com/?q%3Drandom%2Bnumbers%2Bin%2Bpython%2B3][research]] how to do this online.
